pipeline {
    agent {
        dockerfile {
            filename 'pipelines/template-creator/Dockerfile'
        }
    }
    parameters {
        string(name: 'PROXMOX_USERNAME', defaultValue: 'root@pam', description: 'The username to authenticate to proxmox as')
        password(name: 'PROXMOX_PASSWORD', description: 'The password to authenticate to proxmox with')
        string(name: 'PROXMOX_HOST', defaultValue: 'cyberops2.pizzasec.com', description: 'ProxMox host https endpoint')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/OrangeSquirter/homelab-seed.git']]
                ])
            }
        }
        stage('Generate API Credentials') {
            steps {
                script {
                    def credentialsId = 'proxmox-api-credentials'
                    def credentials = null

                    try {
                        withCredentials([string(credentialsId: credentialsId, variable: 'existingCredentials')]) {
                            credentials = existingCredentials
                        }
                    } catch (Exception e) {
                        echo "Credentials not found: ${e.message}"
                    }

                    if (credentials == null || credentials.isEmpty()) {
                        echo "API credentials not found, generating new credentials."
                        dir('pipelines/template-creator') {
                            sh """
                                python generate_proxmox_api_credentials.py --username ${params.PROXMOX_USERNAME} --password ${params.PROXMOX_PASSWORD} --host ${params.PROXMOX_HOST}
                            """

                            def proxmoxCredentials = readFile('proxmox_credentials.json')
                            def proxmoxCredentialsJson = readJSON(text: proxmoxCredentials)
                            def ticket = proxmoxCredentialsJson.ticket
                            def csrfToken = proxmoxCredentialsJson.csrf_token

                            def credentialsJson = [
                                "": "0",
                                "credentials": [
                                    "scope": "GLOBAL",
                                    "id": "${credentialsId}",
                                    "username": "${ticket}",
                                    "password": csrfToken,
                                    "description": "Proxmox API credentials",
                                    "stapler-class": "org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl"
                                ]
                            ]

                            withCredentials([usernamePassword(credentialsId: '', usernameVariable: 'JENKINS_USERNAME', passwordVariable: 'JENKINS_PASSWORD', credentialsIdVariable: 'CREDENTIALS_ID')]) {
                                script {
                                    def creds = Jenkins.instance.getDescriptor('com.cloudbees.plugins.credentials.SystemCredentialsProvider').getCredentials(com.cloudbees.plugins.credentials.Credentials.class).findAll {
                                        it.id == "${credentialsId}"
                                    }
                                    if (creds.isEmpty()) {
                                        Jenkins.instance.getDescriptor('com.cloudbees.plugins.credentials.SystemCredentialsProvider').getStore().addCredentials(com.cloudbees.plugins.credentials.domains.Domain.global(), new org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl(org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImplScope.GLOBAL, credentialsId, "Proxmox API credentials", Secret.fromString(proxmoxCredentialsJson)))
                                    }
                                }
                            }
                        }
                    } else {
                        echo "Using existing API credentials."
                    }
                }
            }
        }
        stage('Build Templates') {
            steps {
                script {
                    dir('pipelines/template-creator') {
                        sh 'python template-creator.py'
                    }
                }
            }
        }
    }
}
