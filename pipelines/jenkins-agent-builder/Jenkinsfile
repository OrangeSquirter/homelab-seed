pipeline {
    agent {
        dockerfile {
            filename 'pipelines/jenkins-agent-builder/Dockerfile'
        }
    }
    options {
        disableConcurrentBuilds()
    }
    parameters {
        string(name: 'PROXMOX_IP', defaultValue: 'cyberops2.pizzasec.com', description: 'ProxMox IP address')
        string(name: 'PROXMOX_NODE', defaultValue: 'cyberops2', description: 'ProxMox to build the box on')
        string(name: 'PROXMOX_POOL', defaultValue: 'Admin', description: 'ProxMox resource pool to assign')
        string(name: 'TEMPLATE', defaultValue: 'ubuntu-22', description: 'Name of the template to use')
        choice(name: 'CORES', choices: ['2', '4', '8'], description: 'Number of cores that will be allocated to the VM')
        choice(name: 'MEMORY', choices: ['2048', '4096', '8192'], description: 'Memory allocation for the VM in MB')
        string(name: 'STORAGE', defaultValue: '20', description: 'Storage for the VM in GB')
        string(name: 'VM_NAME', defaultValue: 'jenkins-agent', description: 'Name of the box to build')
        string(name: 'ROLE', defaultValue: 'jenkins', description: 'Why is this box being built')
        string(name: 'BRANCH', defaultValue: 'master', description: 'If this is associated with a git branch, assign it')
        choice(name: 'NETWORK', choices: ['vmbr0', 'vmbr1', 'patron'], description: 'Network to place the VM on')
        string(name: 'JENKINS_URL', defaultValue: 'http://jenkins.pizzasec.com:8080', description: 'URL of Jenkins')
        string(name: 'AGENT_NAME', defaultValue: 'main', description: 'Name of the new agent')
        string(name: 'AGENT_EXECUTORS', defaultValue: '10', description: 'Number of executors for the new agent')
    }
    environment {
        JENKINS_API_USER    = "jenkins"
        JENKINS_API_TOKEN   = credentials('JENKINS_API_TOKEN')
        SECRET_FILE         = "TEMP_SECRET.txt"
        // This needs to be added by hand to the credential store
        VM_SSH_KEY          = "internal-ssh-key"
        SSH_KEY_FILE        = "internal_ssh_key.pem"
    }
    stages {
        stage('Parameter Validation') {
            steps {
                script {
                    if (!params.ROLE.matches('^[a-zA-Z0-9._/-]+$')) {
                        error("Invalid ROLE parameter. Only letters, numbers, '.', '_', '-', and '/' are allowed.")
                    }
                    if (!params.BRANCH.matches('^[a-zA-Z0-9._/-]+$')) {
                        error("Invalid BRANCH parameter. Only letters, numbers, '.', '_', '-', and '/' are allowed.")
                    }
                    if (!params.STORAGE.isInteger() || params.STORAGE.toInteger() > 200) {
                        error("Invalid STORAGE parameter. It must be a number and less than or equal to 200.")
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/OrangeSquirter/homelab-seed.git']]
                ])
            }
        }
        stage('Configure Agent On Master') {
            steps {
                script {
                    dir('pipelines/jenkins-agent-builder') {
                        sh """
                            echo "Set up agent on controller"
                            python generate-agent.py \
                                --jenkins-url   ${params.JENKINS_URL} \
                                --agent-name    ${params.AGENT_NAME} \
                                --username      ${JENKINS_API_USER} \
                                --api-token     ${JENKINS_API_TOKEN} \
                                --label         ${params.NETWORK} \
                                --executors     ${params.AGENT_EXECUTORS} \
                                --secret-file   ${SECRET_FILE}
                        """
                        stash name: 'agent-secrets', includes: SECRET_FILE
                    }
                }
            }
        }
        stage('Build Box') {
            steps {
                script {
                    def buildbox = build job: 'box-builder', 
                        parameters: [
                            string(name: 'PROXMOX_IP',      value: params.PROXMOX_IP),
                            string(name: 'PROXMOX_NODE',    value: params.PROXMOX_NODE),
                            string(name: 'PROXMOX_POOL',    value: params.PROXMOX_POOL),
                            string(name: 'TEMPLATE',        value: params.TEMPLATE),
                            string(name: 'CORES',           value: params.CORES),
                            string(name: 'MEMORY',          value: params.MEMORY),
                            string(name: 'STORAGE',         value: params.STORAGE),
                            string(name: 'VM_NAME',         value: params.VM_NAME),
                            string(name: 'ROLE',            value: params.ROLE),
                            string(name: 'BRANCH',          value: params.BRANCH),
                            string(name: 'NETWORK',         value: params.NETWORK)
                        ], 
                        propagate: true, 
                        wait: true

                    copyArtifacts(
                        projectName: 'box-builder', 
                        selector: specific("${buildbox.number}"),
                        filter: 'vm_metadata.json'
                    )
                    stash name: 'vm-metadata', includes: "vm_metadata.json"
                }
            }
        }
        stage('Provision Jenkins Agent') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: $VM_SSH_KEY, keyFileVariable: 'SSH_KEY_FILE')]) {
                        sh """
                            echo "Writing SSH private key to ${SSH_KEY_FILE}"
                            cp \$SSH_KEY_FILE ${SSH_KEY_FILE}
                            chmod 600 ${SSH_KEY_FILE}
                        """
                    }
                    unstash 'agent-secrets'
                    sh "cat ${SECRET_FILE}"
                    unstash 'vm-metadata'
                    sh "cat vm_metadata.json"
                    sh """
                        python your-python-script.py \
                            --secret-file ${SECRET_FILE} \
                            --metadata-file vm_metadata.json \
                            --ssh-key-file ${SSH_KEY_FILE} \
                            --scp-dir "pipelines/jenkins-agent-builder/agent-configs" \
                            --agent-name ${params.AGENT_NAME}
                    """
                }
            }
        }
    }
}
